var SystemDUnitFile, checkForBrokenConnections, createFile, createFromSchema, createOptions, findPorts, generateConnectionKeys, _;

SystemDUnitFile = require("joukou-conductor-systemd").SystemDUnitFile;

_ = require("lodash");

createFromSchema = function(input, machineID, joukouMessageQueAddress, joukouApiAddress, joukouGraphExchangeKey) {
  var connections, name, processes;
  if (!_.isPlainObject(input)) {
    throw new TypeError("input is not an object");
  }
  if (typeof joukouMessageQueAddress !== "string") {
    throw new TypeError("joukouMessageQueAddress is not a string");
  }
  if (typeof joukouApiAddress !== "string") {
    throw new TypeError("joukouApiAddress is not a string");
  }
  if (typeof joukouGraphExchangeKey !== "string") {
    throw new TypeError("joukouGraphExchangeKey is not a string");
  }
  if (!_.isPlainObject(input.properties)) {
    throw new TypeError("input.properties is not an object");
  }
  if (!_.isPlainObject(input.processes)) {
    throw new TypeError("input.processes is not an object");
  }
  if (!_.isArray(input.connections)) {
    throw new TypeError("input.connections is not an array");
  }
  name = input.properties.name;
  if (!name) {
    throw new Error("input.properties.name is required");
  }
  connections = _.cloneDeep(input.connections);
  checkForBrokenConnections(connections);
  processes = _.cloneDeep(input.processes);
  return createOptions(name, processes, connections, machineID, joukouMessageQueAddress, joukouApiAddress, joukouGraphExchangeKey);
};

createOptions = function(name, processes, connections, machineID, joukouMessageQueAddress, joukouApiAddress, joukouGraphExchangeKey) {
  var actualProcessKey, component, file, label, options, process, processKey, unit;
  options = [];

  /*
  use format
  [
    {
      unitName: "name"
      options: [SystemDUnitFile].options
      machineID: machineID
    }
  ]
   */
  for (processKey in processes) {
    if (!processes.hasOwnProperty(processKey)) {
      continue;
    }
    process = processes[processKey];
    component = process.metadata && process.metadata.circle && process.metadata.circle.key;
    component = component || process.component;
    component = component || processKey;
    actualProcessKey = process.metadata && process.metadata.key;
    actualProcessKey = actualProcessKey || processKey;
    label = process.metadata && process.metadata.label;
    label = label || component || processKey;
    unit = {
      process: process,
      processKey: component,
      machineID: machineID,
      dockerContainer: (process.metadata && process.metadata.image) || process.component,
      ports: findPorts(connections, processKey, actualProcessKey)
    };
    generateConnectionKeys(unit.ports, joukouGraphExchangeKey);
    file = createFile(unit, joukouMessageQueAddress, joukouApiAddress, label);
    options.push({
      unitName: processKey,
      options: file.options,
      machineID: machineID
    });
  }
  return options;
};

createFile = function(unit, joukouMessageQueAddress, joukouApiAddress, label) {
  var file, key, port, _i, _len, _ref;
  file = new SystemDUnitFile();
  file.service.addEnvironment("JOUKOU_AMQP_ADDR", joukouMessageQueAddress);
  file.service.addEnvironment("JOUKOU_API_ADDR", joukouApiAddress);
  _ref = unit.ports;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    port = _ref[_i];
    if (!port || !port.port) {
      continue;
    }
    key = "JOUKOU_CIRCLE_" + port.type + "_" + port.name + "_";
    file.service.addEnvironment("" + key + "EXCHANGE", port.port.exchangeKey);
    file.service.addEnvironment("" + key + "ROUTING_KEY", port.port.routingKey);
  }
  file.service.addUser("root");
  file.service.addType("notify");
  file.service.addNotifyAccess("all");
  file.service.addTimeoutStartSec("12min");
  file.service.addTimeoutStopSec("15");
  file.service.addRestart("on-failure");
  file.service.addRestartSec("10s");
  file.service.addEnvironmentFile("/run/docker.env");
  file.service.addExecStartPre("/usr/bin/docker run --rm -v " + "/opt/bin:/opt/bin ibuildthecloud/systemd-docker");
  file.service.addExecStartPre("/usr/bin/docker pull " + unit.dockerContainer);
  file.service.addExecStartPre("-/usr/bin/docker kill %p");
  file.service.addExecStartPre("-/usr/bin/docker rm %p");
  file.service.addExecStart("/opt/bin/systemd-docker run --name %p " + unit.dockerContainer);
  file.service.addExecStop("/usr/bin/docker kill %p");
  file.unit.addDescription("Unit for " + label);
  file.unit.addDocumentation(unit.dockerContainer);
  file.unit.addAfter("docker.service");
  file.unit.addRequires("docker.service");
  file.unit.addAfter("rabbitmq.service");
  file.unit.addRequires("rabbitmq.service");
  file.unit.addAfter("api.service");
  file.unit.addRequires("api.service");
  return file;
};

generateConnectionKeys = function(ports, joukouGraphExchangeKey) {
  var port, portObject, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = ports.length; _i < _len; _i++) {
    portObject = ports[_i];
    port = portObject.port;
    if (port && !port.exchangeKey) {
      port.exchangeKey = joukouGraphExchangeKey;
      _results.push(port.routingKey = "" + (portObject.source || portObject.process) + "_" + portObject.name);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

checkForBrokenConnections = function(connections) {
  var connection, i, source, target, _results;
  i = 0;
  _results = [];
  while (i < connections.length) {
    connection = connections[i];
    i++;
    if (!_.isPlainObject(connection)) {
      continue;
    }
    target = connection["tgt"];
    source = connection["src"];
    if (!target && !source) {
      continue;
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

findPorts = function(connections, processKey, component) {
  var connection, result, source, _i, _len;
  result = [];
  for (_i = 0, _len = connections.length; _i < _len; _i++) {
    connection = connections[_i];
    source = null;
    if (connection.src) {
      source = connection.src.process;
      if (connection.src.process === processKey) {
        if (typeof connection.src.port !== "string") {
          throw new TypeError("Port name is expected to be a string");
        }
        result.push({
          type: "OUTPORT",
          name: connection.src.port.toUpperCase(),
          port: connection.src,
          connection: connection,
          source: source,
          process: component
        });
      }
    }
    if (connection.tgt) {
      if (connection.tgt.process === processKey) {
        if (typeof connection.tgt.port !== "string") {
          throw new TypeError("Port name is expected to be a string");
        }
        result.push({
          type: "INPORT",
          name: connection.tgt.port.toUpperCase(),
          port: connection.tgt,
          connection: connection,
          source: source,
          process: component
        });
      }
    }
  }
  return result;
};

module.exports = {
  createFromSchema: createFromSchema
};

//# sourceMappingURL=data:application/json;base64,